{% comment %}
  Upsell Slider Block
  This block displays recommended products in a sliding carousel format
{% endcomment %}

<div class="upsell-slider-wrapper" data-block-id="{{ block.id }}">
  <div class="upsell-header">
    <h3 class="upsell-slider-title">{{ block.settings.title | default: 'Recommended for you' }}</h3>
    <div class="upsell-nav-header">
      <button type="button" class="upsell-nav-prev-header" aria-label="Previous products">‹</button>
      <button type="button" class="upsell-nav-next-header" aria-label="Next products">›</button>
    </div>
  </div>
  
  <div class="upsell-slider-container">
    <div class="upsell-slider" 
         data-auto-slide="{{ block.settings.enable_auto_slide }}"
         data-slide-duration="{{ block.settings.slide_duration }}">
      
      {% liquid
        assign product_handles = block.settings.product_list | split: ','
        assign max_products = block.settings.products_to_show | default: 4
        assign products_shown = 0
        assign use_dynamic_products = block.settings.use_dynamic_products | default: true
      %}
      
      {% for handle in product_handles limit: max_products %}
        {% liquid
          assign handle = handle | strip
          assign upsell_product = collections.all.products[handle]
        %}
        
        {% if upsell_product and products_shown < max_products %}
          {% assign products_shown = products_shown | plus: 1 %}
          
          <div class="upsell-slide">
            <div class="upsell-product-card">
              {% if upsell_product.featured_image %}
                <div class="upsell-product-image">
                  <img src="{{ upsell_product.featured_image | img_url: '200x200' }}" 
                       alt="{{ upsell_product.featured_image.alt | default: upsell_product.title }}"
                       loading="lazy">
                </div>
              {% endif %}
              
              <div class="upsell-product-info">
                <h4 class="upsell-product-title">
                  <a href="{{ upsell_product.url }}">{{ upsell_product.title }}</a>
                </h4>
                
                <div class="upsell-product-price">
                  {% if upsell_product.compare_at_price > upsell_product.price %}
                    <span class="upsell-price-compare">{{ upsell_product.compare_at_price | money }}</span>
                  {% endif %}
                  <span class="upsell-price-current">{{ upsell_product.price | money }}</span>
                  {% if upsell_product.compare_at_price > upsell_product.price %}
                    {% assign discount = upsell_product.compare_at_price | minus: upsell_product.price %}
                    {% assign discount_percent = discount | times: 100 | divided_by: upsell_product.compare_at_price %}
                    <span class="upsell-discount">{{ discount_percent | round }}% off</span>
                  {% endif %}
                </div>
                
                <div class="upsell-product-actions">
                  {% if upsell_product.available %}
                    <button type="button" 
                            class="upsell-add-to-cart btn"
                            data-product-id="{{ upsell_product.variants.first.id }}"
                            data-product-title="{{ upsell_product.title }}"
                            data-product-price="{{ upsell_product.price }}">
                      <span class="btn-text">+ Add</span>
                      <span class="btn-loading" style="display: none;">Adding...</span>
                    </button>
                  {% else %}
                    <button type="button" class="upsell-sold-out btn" disabled>
                      Sold Out
                    </button>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        {% endif %}
      {% endfor %}
      
      {% if products_shown == 0 %}
        <div class="upsell-no-products" id="upsell-placeholder-{{ block.id }}">
          <p>Loading recommendations...</p>
        </div>
      {% endif %}
    </div>
    
    {% if products_shown > 1 %}
      <div class="upsell-nav">
        <button type="button" class="upsell-nav-prev" aria-label="Previous products">‹</button>
        <button type="button" class="upsell-nav-next" aria-label="Next products">›</button>
      </div>
    {% endif %}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Fetch dynamic products if no static products are configured
  async function loadDynamicProducts(blockId) {
    try {
      const shopDomain = window.Shopify ? window.Shopify.shop : '{{ shop.permanent_domain }}';
      // Get the current tunnel URL dynamically
      let tunnelUrl = '';
      try {
        // Try to get the app URL from Shopify's app bridge if available
        if (window.shopifyAppBridge) {
          tunnelUrl = window.shopifyAppBridge.config.host;
        } else if (window.location.search.includes('shop=')) {
          // Extract shop from URL and construct likely tunnel URL
          const urlParams = new URLSearchParams(window.location.search);
          const shopParam = urlParams.get('shop');
          if (shopParam) {
            // Use a more dynamic approach - try to fetch from different possible endpoints
            tunnelUrl = `https://${shopParam.replace('.myshopify.com', '')}.myshopify.com`;
          }
        }
      } catch (e) {
        console.warn('Could not detect tunnel URL:', e);
      }
      
      // Get the current tunnel URL by checking various sources
      const possibleTunnelUrls = [];
      
      // Check if we're in the Shopify admin with app URL parameters
      if (window.location.search.includes('host=')) {
        const urlParams = new URLSearchParams(window.location.search);
        const host = urlParams.get('host');
        if (host) {
          try {
            const decodedHost = atob(host);
            if (decodedHost.includes('trycloudflare.com')) {
              const tunnelUrl = decodedHost.split('/')[0];
              possibleTunnelUrls.push(`https://${tunnelUrl}`);
            }
          } catch (e) {
            console.warn('Could not decode host parameter:', e);
          }
        }
      }
      
      // Check current window location for tunnel URLs
      if (window.location.hostname.includes('trycloudflare.com')) {
        possibleTunnelUrls.push(`https://${window.location.hostname}`);
      }
      
      // Try multiple API endpoints to ensure reliability
      const apiUrls = [
        // Current tunnel URL
        `https://safari-recommend-documentary-fishing.trycloudflare.com/api/upsells?shop=${shopDomain}&placement=product_page`,
        // Try detected tunnel URLs first
        ...possibleTunnelUrls.map(url => `${url}/api/upsells?shop=${shopDomain}&placement=product_page`),
        // Try JSONP for cross-origin support
        `https://safari-recommend-documentary-fishing.trycloudflare.com/api/upsells?shop=${shopDomain}&placement=product_page&callback=handleUpsellData`,
        // Legacy fallback
        `https://boc-wagner-writer-morning.trycloudflare.com/api/upsells?shop=${shopDomain}&placement=product_page`
      ];
      
      console.log('Loading upsell products from multiple endpoints:', apiUrls);
      
      let response;
      let lastError;
      
      // Try each endpoint until one works
      for (const apiUrl of apiUrls) {
        try {
          console.log('Trying endpoint:', apiUrl);
          response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            timeout: 10000 // 10 second timeout
          });
          
          if (response.ok) {
            console.log('Successfully connected to:', apiUrl);
            break;
          } else {
            console.warn('Endpoint returned error:', apiUrl, response.status);
            lastError = new Error(`HTTP ${response.status}`);
          }
        } catch (error) {
          console.warn('Failed to connect to:', apiUrl, error.message);
          lastError = error;
          response = null;
        }
      }
      
      if (!response || !response.ok) {
        throw lastError || new Error('All API endpoints failed');
      }
      
      const data = await response.json();
      
      console.log('Upsell API response:', data);
      
      if (data.productHandles && data.productHandles.length > 0) {
        console.log('Rendering', data.productHandles.length, 'products');
        await renderDynamicProducts(blockId, data);
      } else {
        console.log('No product handles found in response');
      }
    } catch (error) {
      console.error('Failed to load dynamic upsell products:', error);
      
      // Retry after a delay (helps with temporary network issues)
      setTimeout(() => {
        console.log('Retrying to load upsell products...');
        loadDynamicProducts(blockId);
      }, 5000);
      
      // Show loading message while retrying
      const placeholder = document.getElementById(`upsell-placeholder-${blockId}`);
      if (placeholder) {
        placeholder.innerHTML = '<p>Loading recommendations...</p>';
      }
    }
  }

  async function renderDynamicProducts(blockId, upsellData) {
    const { 
      productHandles, 
      title, 
      showCount, 
      layout = 'slider',
      backgroundColor = '#ffffff',
      textColor = '#000000',
      buttonColor = '#1a73e8',
      buttonText = 'Add',
      borderRadius = 8,
      padding = 16,
      centerPadding = true
    } = upsellData;
    const placeholder = document.getElementById(`upsell-placeholder-${blockId}`);
    
    if (!placeholder) return;
    
    // Update title if provided
    const titleElement = placeholder.closest('.upsell-slider-wrapper').querySelector('.upsell-slider-title');
    if (titleElement && title) {
      titleElement.textContent = title;
    }
    
    // Fetch product data from Shopify
    const products = [];
    for (const handle of productHandles.slice(0, showCount)) {
      try {
        const productResponse = await fetch(`/products/${handle}.js`);
        const product = await productResponse.json();
        products.push(product);
      } catch (error) {
        console.warn(`Failed to fetch product ${handle}:`, error);
      }
    }
    
    if (products.length === 0) return;
    
    // Render products
    const slider = placeholder.parentElement;
    placeholder.remove();
    
    // Apply style settings to container
    const container = slider.closest('.upsell-slider-wrapper');
    if (container) {
      container.style.backgroundColor = backgroundColor;
      container.style.color = textColor;
      container.style.borderRadius = `${borderRadius}px`;
      container.style.padding = `${padding}px`;
    }
    
    // Apply layout class
    slider.setAttribute('data-layout', layout);
    if (layout === 'stack') {
      slider.style.display = 'flex';
      slider.style.flexDirection = 'column';
      slider.style.gap = '16px';
    }
    
    products.forEach(product => {
      const slide = document.createElement('div');
      slide.className = layout === 'slider' ? 'upsell-slide' : 'upsell-stack-item';
      
      const variant = product.variants && product.variants[0];
      const price = variant ? (variant.price / 100).toFixed(2) : '0.00';
      const comparePrice = variant && variant.compare_at_price ? (variant.compare_at_price / 100).toFixed(2) : null;
      const currency = window.Shopify ? window.Shopify.currency.active : 'USD';
      
      let discountHtml = '';
      if (comparePrice && parseFloat(comparePrice) > parseFloat(price)) {
        const discount = Math.round(((parseFloat(comparePrice) - parseFloat(price)) / parseFloat(comparePrice)) * 100);
        discountHtml = `<span class="upsell-discount">${discount}% off</span>`;
      }
      
      slide.innerHTML = `
        <div class="upsell-product-card checkout-style" style="background-color: ${backgroundColor}; color: ${textColor}; border-radius: ${borderRadius}px; padding: ${centerPadding ? '16px' : '12px'}; border: 1px solid #e1e1e1;">
          <div class="upsell-product-layout">
            <div class="upsell-product-image" style="width: 80px; height: 80px; background: #f5f5f5; border-radius: 4px; display: flex; align-items: center; justify-content: center; flex-shrink: 0; margin-right: 12px;">
              ${product.featured_image ? `
                <img src="${product.featured_image}" 
                     alt="${product.title}"
                     loading="lazy"
                     style="width: 100%; height: 100%; object-fit: cover; border-radius: 4px;">
              ` : `
                <span style="font-size: 24px;">📦</span>
              `}
            </div>
            
            <div class="upsell-product-info" style="flex: 1; display: flex; flex-direction: column; justify-content: space-between;">
              <div class="upsell-product-details">
                <h4 class="upsell-product-title" style="margin: 0 0 4px 0; font-size: 14px; font-weight: 600; line-height: 1.3;">
                  <a href="/products/${product.handle}" style="text-decoration: none; color: ${textColor};">${product.title}</a>
                </h4>
                
                <div class="upsell-product-price" style="margin: 4px 0;">
                  ${comparePrice ? `<span class="upsell-price-compare" style="text-decoration: line-through; color: #999; font-size: 12px; margin-right: 6px;">$${comparePrice}</span>` : ''}
                  <span class="upsell-price-current" style="font-weight: 700; color: ${textColor}; font-size: 14px;">$${price}</span>
                  ${discountHtml}
                </div>
              </div>
              
              <div class="upsell-product-actions" style="margin-top: 8px;">
                ${product.available ? `
                  <button type="button" 
                          class="upsell-add-to-cart btn"
                          data-product-id="${variant.id}"
                          data-product-title="${product.title}"
                          data-product-price="${variant.price}"
                          style="background-color: ${buttonColor}; border-radius: ${borderRadius}px; padding: 8px 16px; color: white; border: none; font-size: 12px; font-weight: 600; cursor: pointer; transition: all 0.2s ease;">
                    <span class="btn-text">${buttonText}</span>
                    <span class="btn-loading" style="display: none;">Adding...</span>
                  </button>
                ` : `
                  <button type="button" class="upsell-sold-out btn" disabled style="background: #999; color: white; border: none; padding: 8px 16px; border-radius: ${borderRadius}px; font-size: 12px;">
                    Sold Out
                  </button>
                `}
              </div>
            </div>
          </div>
        </div>
      `;
      
      slider.appendChild(slide);
    });
    
    // Re-initialize slider functionality for new products
    const sliderContainer = slider.closest('.upsell-slider-container');
    initializeUpsellSlider(sliderContainer);
    
    // Update header navigation if it exists
    if (sliderContainer._updateSlideCount) {
      sliderContainer._updateSlideCount();
    }
  }

  function initializeHeaderNavigation(container, blockWrapper) {
    const headerPrevBtn = blockWrapper.querySelector('.upsell-nav-prev-header');
    const headerNextBtn = blockWrapper.querySelector('.upsell-nav-next-header');
    
    if (!headerPrevBtn || !headerNextBtn) return;
    
    // Store reference to current slide index
    let currentSlideIndex = 0;
    let totalSlides = 0;
    
    function updateSlideCount() {
      const slides = blockWrapper.querySelectorAll('.upsell-slide');
      totalSlides = slides.length;
    }
    
    function navigateSlides(direction) {
      const slides = blockWrapper.querySelectorAll('.upsell-slide');
      if (slides.length <= 1) return;
      
      if (direction === 'next') {
        currentSlideIndex = (currentSlideIndex + 1) % slides.length;
      } else {
        currentSlideIndex = (currentSlideIndex - 1 + slides.length) % slides.length;
      }
      
      // Apply transform to slide container
      const slider = blockWrapper.querySelector('.upsell-slider');
      slides.forEach((slide, i) => {
        slide.style.transform = `translateX(${(i - currentSlideIndex) * 100}%)`;
      });
    }
    
    headerNextBtn.addEventListener('click', () => navigateSlides('next'));
    headerPrevBtn.addEventListener('click', () => navigateSlides('prev'));
    
    // Initial update
    updateSlideCount();
    
    // Store functions on the container for later use
    container._updateSlideCount = updateSlideCount;
    container._navigateSlides = navigateSlides;
  }

  function initializeUpsellSlider(container) {
    const slider = container.querySelector('.upsell-slider');
    if (!slider) return;
    
    const prevBtn = container.querySelector('.upsell-nav-prev');
    const nextBtn = container.querySelector('.upsell-nav-next');
    const slides = slider.querySelectorAll('.upsell-slide');
    const autoSlide = slider.dataset.autoSlide === 'true';
    const slideDuration = parseInt(slider.dataset.slideDuration) || 5000;
    
    if (slides.length <= 1) {
      const nav = container.querySelector('.upsell-nav');
      if (nav) nav.style.display = 'none';
      return;
    }
    
    let currentSlide = 0;
    let autoSlideInterval;
    
    function showSlide(index) {
      slides.forEach((slide, i) => {
        slide.style.transform = `translateX(${(i - index) * 100}%)`;
      });
      currentSlide = index;
    }
    
    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      showSlide(next);
    }
    
    function prevSlide() {
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(prev);
    }
    
    // Initialize
    showSlide(0);
    
    // Navigation buttons (both original and header)
    const headerPrevBtn = container.closest('.upsell-slider-wrapper').querySelector('.upsell-nav-prev-header');
    const headerNextBtn = container.closest('.upsell-slider-wrapper').querySelector('.upsell-nav-next-header');
    
    if (nextBtn) nextBtn.addEventListener('click', nextSlide);
    if (prevBtn) prevBtn.addEventListener('click', prevSlide);
    if (headerNextBtn) headerNextBtn.addEventListener('click', nextSlide);
    if (headerPrevBtn) headerPrevBtn.addEventListener('click', prevSlide);
    
    // Auto slide
    if (autoSlide && slides.length > 1) {
      autoSlideInterval = setInterval(nextSlide, slideDuration);
      
      // Pause on hover
      slider.addEventListener('mouseenter', () => {
        clearInterval(autoSlideInterval);
      });
      
      slider.addEventListener('mouseleave', () => {
        autoSlideInterval = setInterval(nextSlide, slideDuration);
      });
    }
    
    // Add to cart functionality
    const addToCartButtons = slider.querySelectorAll('.upsell-add-to-cart');
    addToCartButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const variantId = this.dataset.productId;
        const productTitle = this.dataset.productTitle;
        const btnText = this.querySelector('.btn-text');
        const btnLoading = this.querySelector('.btn-loading');
        
        // Show loading state
        btnText.style.display = 'none';
        btnLoading.style.display = 'inline';
        this.disabled = true;
        
        // Add to cart
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1
          })
        })
        .then(response => response.json())
        .then(data => {
          // Success feedback
          btnText.textContent = '✓ Added';
          btnText.style.display = 'inline';
          btnLoading.style.display = 'none';
          
          // Update cart drawer/count if exists
          if (typeof window.updateCartDrawer === 'function') {
            window.updateCartDrawer();
          }
          
          // Reset button after delay
          setTimeout(() => {
            btnText.textContent = '+ Add';
            this.disabled = false;
          }, 2000);
        })
        .catch(error => {
          console.error('Error adding to cart:', error);
          btnText.textContent = 'Error';
          btnText.style.display = 'inline';
          btnLoading.style.display = 'none';
          this.disabled = false;
          
          setTimeout(() => {
            btnText.textContent = '+ Add';
          }, 2000);
        });
      });
    });
  }

  const upsellSliders = document.querySelectorAll('.upsell-slider');
  
  upsellSliders.forEach(function(slider) {
    const container = slider.closest('.upsell-slider-container');
    const slides = slider.querySelectorAll('.upsell-slide');
    const blockWrapper = slider.closest('.upsell-slider-wrapper');
    const blockId = blockWrapper.dataset.blockId;
    
    // If no static products are configured, try to load dynamic products
    if (slides.length === 0) {
      const placeholder = slider.querySelector('.upsell-no-products');
      if (placeholder) {
        // Always initialize header navigation even when loading dynamic products
        initializeHeaderNavigation(container, blockWrapper);
        loadDynamicProducts(blockId);
      }
    } else {
      // Initialize static products
      initializeUpsellSlider(container);
    }
  });
});
</script>

{% schema %}
{
  "name": "Upsell Slider",
  "target": "section",
  "stylesheet": "upsell-slider.css",
  "settings": [
    {
      "type": "paragraph",
      "content": "Upsell products are configured in your app dashboard. Go to your app to manage which products appear here."
    }
  ]
}
{% endschema %}